<?php

/**
 * This is the model base class for the table "user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "user" available as properties of the model,
 * followed by relations of table "user" available as properties of the model.
 *
 * @property string $id
 * @property string $username
 * @property string $email
 * @property string $pass
 * @property string $type
 * @property string $date_entered
 *
 * @property Comment[] $comments
 * @property File[] $files
 * @property Page[] $pages
 */
abstract class BaseUser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'username';
	}

	public function rules() {
		return array(
			array('username, email, pass, type, date_entered', 'required'),
			array('username', 'length', 'max'=>45),
			array('email', 'length', 'max'=>60),
			array('pass', 'length', 'max'=>64),
			array('type', 'length', 'max'=>6),
			array('id, username, email, pass, type, date_entered', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'comments' => array(self::HAS_MANY, 'Comment', 'user_id'),
			'files' => array(self::HAS_MANY, 'File', 'user_id'),
			'pages' => array(self::HAS_MANY, 'Page', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'username' => Yii::t('app', 'Username'),
			'email' => Yii::t('app', 'Email'),
			'pass' => Yii::t('app', 'Pass'),
			'type' => Yii::t('app', 'Type'),
			'date_entered' => Yii::t('app', 'Date Entered'),
			'comments' => null,
			'files' => null,
			'pages' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('pass', $this->pass, true);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('date_entered', $this->date_entered, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}